package com.example.myapplication.RegisterAuth

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.EditText
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.security.crypto.EncryptedSharedPreferences
import androidx.security.crypto.MasterKey
import com.example.myapplication.MainMenu.LentaActivity
import com.example.myapplication.R
import com.example.myapplication.UserPost.User
import com.example.myapplication.network.RetrofitInstance
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class RegistrationActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val sharedPrefsFile = "encrypted_prefs"
        val masterKeyAlias = MasterKey.Builder(this)
            .setKeyScheme(MasterKey.KeyScheme.AES256_GCM)
            .build()
        val sharedPreferences = try {
            EncryptedSharedPreferences.create(
                this,
                sharedPrefsFile,
                masterKeyAlias,
                EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
            )
        } catch (e: Exception) {
            Log.e("EncryptedSharedPrefs", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EncryptedSharedPreferences", e)
            // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            deleteSharedPreferences(sharedPrefsFile)
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            EncryptedSharedPreferences.create(
                this,
                sharedPrefsFile,
                masterKeyAlias,
                EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,
                EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM
            )
        }
        val savedIdw = sharedPreferences.getInt("id", 0)
        Log.d("ProfileActivity", "loggedInUserId: $savedIdw")
        val savedUsername = sharedPreferences.getString("username", null)
        val savedPassword = sharedPreferences.getString("password", null)

        if (savedUsername != null && savedPassword != null) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            val intent = Intent(this, LentaActivity::class.java)
            val user = User(
                id = savedIdw,              // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0, –µ—Å–ª–∏ `id` –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                login = savedUsername,
                password = savedPassword,
                avatar_uri = null    // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å null, –µ—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
            )
            intent.putExtra("user", user)
            startActivity(intent)
            finish()  // –ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }

        val userLogin: EditText = findViewById(R.id.nameText)
        val userPass: EditText = findViewById(R.id.passText)
        val userDate: EditText = findViewById(R.id.birthText)
        val buttonReg: Button = findViewById(R.id.button_reg)
        val linkToReg2: TextView = findViewById(R.id.textViewLink2)

        linkToReg2.setOnClickListener {
            Toast.makeText(this, "$savedUsername $savedPassword", Toast.LENGTH_SHORT).show()
            val intent = Intent(this, AuthActivity::class.java)
            startActivity(intent)
            finish()
        }

        buttonReg.setOnClickListener {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª–µ–π –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
            val login = userLogin.text.toString().trim()
            val pass = userPass.text.toString().trim()
            val date = userDate.text.toString().trim()

            if (login.isEmpty() || pass.isEmpty() || date.isEmpty()) {
                Toast.makeText(this, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", Toast.LENGTH_SHORT).show()
            } else if (pass.length < 3) {
                Toast.makeText(this, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤", Toast.LENGTH_SHORT).show()
            } else {
                lifecycleScope.launch {
                    try {
                        var user = RetrofitInstance.apiService.createUser(User(
                            id = 228,              // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0, –µ—Å–ª–∏ `id` –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                            login = login,
                            password = pass,
                            avatar_uri = null    // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å null, –µ—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                        ))
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ EncryptedSharedPreferences
                        withContext(Dispatchers.IO) {
                            sharedPreferences.edit().apply {
                                putInt("id", RetrofitInstance.apiService.getUserByLogin(user).id)
                                putString("username", login)
                                putString("password", pass)
                                apply()
                            }
                        }
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                        withContext(Dispatchers.Main) {
                            userLogin.text.clear()
                            userPass.text.clear()
                            userDate.text.clear()
                            Toast.makeText(
                                this@RegistrationActivity,
                                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ($login) üòä",
                                Toast.LENGTH_SHORT
                            ).show()
                            val intent = Intent(this@RegistrationActivity, LentaActivity::class.java)

                            intent.putExtra("user", user)
                            startActivity(intent)
                            finish()
                        }
                    } catch (e: Exception) {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                        withContext(Dispatchers.Main) {
                            Toast.makeText(
                                this@RegistrationActivity,
                                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚ùå",
                                Toast.LENGTH_SHORT
                            ).show()
                            Log.e("RegistrationError", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", e)
                        }
                    }
                }
            }
        }
    }
}
